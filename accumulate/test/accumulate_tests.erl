%% Generated with 'testgen v0.2.0'
%% Revision 1 of the exercises generator was used
%% https://github.com/exercism/problem-specifications/raw/7a8722ac4546baae28b4b2c1bdae14e04fdba88c/exercises/accumulate/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(accumulate_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_accumulate_empty_test_'() ->
    Expected = [],
    Input = [],
    Acc = fun (X) -> X * X end,
    {"accumulate empty",
     ?_assertMatch(Expected,
                   accumulate:accumulate(Acc, Input))}.

'2_accumulate_squares_test_'() ->
    Expected = [1, 4, 9],
    Input = [1, 2, 3],
    Acc = fun (X) -> X * X end,
    {"accumulate squares",
     ?_assertMatch(Expected,
                   accumulate:accumulate(Acc, Input))}.

'3_accumulate_upcases_test_'() ->
    Expected = ["HELLO", "WORLD"],
    Input = ["Hello", "world"],
    Acc = fun (X) -> string:uppercase(X) end,
    {"accumulate upcases",
     ?_assertMatch(Expected,
                   accumulate:accumulate(Acc, Input))}.

'4_accumulate_reversed_strings_test_'() ->
    Expected = ["eht", "kciuq", "nworb", "xof", "cte"],
    Input = ["the", "quick", "brown", "fox", "etc"],
    Acc = fun (X) -> string:reverse(X) end,
    {"accumulate reversed strings",
     ?_assertMatch(Expected,
                   accumulate:accumulate(Acc, Input))}.

'5_accumulate_recursively_test_'() ->
    Expected = [["a1", "a2", "a3"],
                ["b1", "b2", "b3"],
                ["c1", "c2", "c3"]],
    Input = ["a", "b", "c"],
    Acc = fun (X) ->
                  accumulate:accumulate(fun (Y) -> X ++ Y end,
                                        ["1", "2", "3"])
          end,
    {"accumulate recursively",
     ?_assertMatch(Expected,
                   accumulate:accumulate(Acc, Input))}.
